#!/usr/bin/env python
# coding: utf-8

# ## Урок 2. Встроенные типы и операции с ними

# ### 1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

# In[9]:


test_list = [123, 'abc', True, 9, 't', [1, 2, 3], None, (1, 2, 3)]

for item in test_list:
    print(item, type(item))


# ### 2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. Для заполнения списка элементов необходимо использовать функцию input()

# In[47]:


input_list = input("Ввести список, разделяя элементы пробелом: ").split()

print("Исходный список: ", input_list)

new_list = input_list.copy()

for i in range(0, len(new_list)-1, 2):
    new_list[i], new_list[i+1] = new_list[i+1], new_list[i]
    
print("Модифицированный список: ", new_list)


# ### 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, весна, лето, осень). Напишите решения через list и через dict.

# In[94]:


# решение через список
winter = ['Зима', 12, 1, 2]
spring = ['Весна', 3, 4, 5]
summer = ['Лето', 6, 7, 8]
autumn = ['Осень', 9, 10, 11]
seasons = [winter, spring, summer, autumn]

mnth_ind = int(input("Номер месяца: "))


if mnth_ind in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12):
    for season in seasons:
        for i in range(1, 4):
            if season[i] == mnth_ind:
                print("Сезон: %s" % (season[0]))
else: print("Такого месяца нет")
    


# In[106]:


# решение через словарь
seas_dct = {12: 'Зима', 
            1: 'Зима',
            2: 'Зима',
            3: 'Весна',
            4: 'Весна',
            5: 'Весна',
            6: 'Лето',
            7: 'Лето',
            8: 'Лето',
            9: 'Осень',
            10: 'Осень',
            11: 'Осень'}

month_id = int(input("Номер месяца: "))
if month_id in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12):
    print("Сезон: %s" % seas_dct.get(month_id))
else: print("Такого месяца нет")


# ### 4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.

# In[116]:


word_list = input("Ввести список слов разделяя их пробелом: ").split()


# In[139]:


#нумерованный список
mod_list = [word[:10] for word in word_list]
for num, word in enumerate(mod_list):
    print ('%d - %s;' % (num, word))


# In[123]:


#решение через словарь
keys = [i for i in range(1, len(word_list)+1)]
values = [word[:10] for word in word_list]

word_stat = dict(zip(keys, values))
print(word_stat)

for k in word_stat.keys():
    print ('%d - %s;' % (k, word_stat.get(k)))


# ### 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.

# In[136]:


in_lst = [7, 6, 5, 5, 5, 3, 3, 2, 2, 2, 2, 1]
out_lst = in_lst.copy()

while True:
    a = int(input("Введите натуральное число: "))
    if a <= 0: # Числа, меньшие 1 - не натуральные. Используем для завершения ввода
        break
    a_cnt = out_lst.count(a)
    if a_cnt != 0:
        a_pos = out_lst.index(a) 
        out_lst.insert(a_pos+a_cnt, a)
    else:
        out_lst.append(a)
        out_lst.sort(reverse = True)

print("Исходный список: \n", in_lst)
print("Модифицированный список: \n", out_lst)


# ### 6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами (характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

# In[164]:


qty = int(input("Введите количество товарных позиций: ")) #количество товаров

param = ["название", "цена", "количество", "eд."]#инициализация словаря
value = ['', 0, 0, '']
item = dict(zip(param, value))

items = [] #список товаров

for n in range(1, qty+1):
    for x in param:
        if type(item[x]) == str:
            item[x] = str(input("%s товара '%d': " %(x, n)))
        elif type(item[x]) == int:
            item[x] = int(input("%s товара '%d': " %(x, n)))
    items.append(tuple([n, item]))#добавление позиции в список
    
    param = ["название", "цена", "количество", "eд."] #очистка словаря
    value = ['', 0, 0, '']
    item = dict(zip(param, value))
         
        


# In[165]:


items


# In[192]:


param = ["название", "цена", "количество", "eд."]
names = []
prices = []
qtys = []
utits = []

data =[] #разобранная информация по товару

for item in items:
    data.append(list(item[1].values()))


# In[193]:


print(data)
transposed_data = list(zip(*data))

print(transposed_data)


# In[194]:


transposed_items = dict(zip(param, list(transposed_data)))

print(transposed_items)

